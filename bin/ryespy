#!/usr/bin/env ruby

$stdout.sync = true

require 'optparse'
require 'ostruct'
require 'logger'

require File.expand_path(File.dirname(__FILE__) + '/../lib/ryespy')


# = Parse opts

options = OpenStruct.new(
  :notifiers => {}
)

OptionParser.new do |opts|
  opts.version = "v#{Ryespy::VERSION}"
  
  opts.banner = opts.ver
  
  opts.separator ""
  opts.separator "Usage: ryespy [OPTIONS]"
  
  opts.separator ""
  opts.separator "Listener:"
  
  opts.on("-l", "--listener LISTENER", [
    'imap',
    'ftp',
    'rax-cf',
  ], "Listener (imap|ftp|rax-cf)") do |o|
    options[:listener] = o.tr('-', '_').to_sym
  end
  
  opts.separator ""
  opts.separator "Polling:"
  
  opts.on("-e", "--[no-]eternal", "Run eternally") do |o|
    options[:eternal] = o
  end
  
  opts.on("--polling-interval [N]", Integer, "Poll every N seconds when --eternal") do |o|
    options[:polling_interval] = o
  end
  
  opts.separator ""
  opts.separator "Redis:"
  
  opts.on("--redis-url [URL]", "Connect Redis to URL") do |o|
    options[:redis_url] = o
  end
  
  opts.on("--redis-ns-ryespy [NS]", "Namespace Redis 'ryespy' as NS") do |o|
    options[:redis_ns_ryespy] = o
  end
  
  opts.on("--redis-ns-notifiers [NS]", "Namespace notifiers Redis 'resque' as NS") do |o|
    options[:redis_ns_notifiers] = o
  end
  
  opts.separator ""
  opts.separator "Listener imap:"
  
  opts.on("--imap-host HOST", "Connect IMAP with HOST") do |o|
    options[:imap_host] = o
  end
  
  opts.on("--imap-port [PORT]", Integer, "Connect IMAP with PORT") do |o|
    options[:imap_port] = o
  end
  
  opts.on("--[no-]imap-ssl", "Connect IMAP using SSL") do |o|
    options[:imap_ssl] = o
  end
  
  opts.on("--imap-username USERNAME", "Connect IMAP with USERNAME") do |o|
    options[:imap_username] = o
  end
  
  opts.on("--imap-password PASSWORD", "Connect IMAP with PASSWORD") do |o|
    options[:imap_password] = o
  end
  
  opts.on("--imap-mailboxes [INBOX,DEV]", Array, "Read IMAP MAILBOXES") do |o|
    options[:imap_mailboxes] = o
  end
  
  opts.separator ""
  opts.separator "Listener ftp:"
  
  opts.on("--ftp-host HOST", "Connect FTP with HOST") do |o|
    options[:ftp_host] = o
  end
  
  opts.on("--[no-]ftp-passive", "Connect FTP using PASSIVE mode") do |o|
    options[:ftp_passive] = o
  end
  
  opts.on("--ftp-username USERNAME", "Connect FTP with USERNAME") do |o|
    options[:ftp_username] = o
  end
  
  opts.on("--ftp-password PASSWORD", "Connect FTP with PASSWORD") do |o|
    options[:ftp_password] = o
  end
  
  opts.on("--ftp-dirs [dir1,dir2]", Array, "Read FTP DIRS") do |o|
    options[:ftp_dirs] = o
  end
  
  opts.separator ""
  opts.separator "Listener  rax-cf  (Rackspace Cloud Files):"
  
  opts.on("--rax-cf-endpoint [ENDPOINT]", "Auth ENDPOINT (default: us)") do |o|
    options[:rax_cf_endpoint] = o
  end
  
  opts.on("--rax-cf-region [REGION]", "Auth REGION (default: dfw)") do |o|
    options[:rax_cf_region] = o
  end
  
  opts.on("--rax-cf-username USERNAME", "Auth USERNAME") do |o|
    options[:rax_cf_username] = o
  end
  
  opts.on("--rax-cf-api-key API_KEY", "Auth API_KEY") do |o|
    options[:rax_cf_api_key] = o
  end
  
  opts.on("--rax-cf-container CONTAINER", "Storage CONTAINER") do |o|
    options[:rax_cf_container] = o
  end
  
  opts.on("--rax-cf-prefixes [P1,P2]", Array, "Prefixes P1,P2 (default: *)") do |o|
    options[:rax_cf_prefixes] = o
  end
  
  opts.separator ""
  opts.separator "Notifier sidekiq:"
  
  opts.on("--notifier-sidekiq [URL]", "Notify Sidekiq/Resque at Redis URL") do |o|
    (options.notifiers[:sidekiq] ||= []) << o
  end
  
  opts.separator ""
  opts.separator "Other:"
  
  opts.on("-v", "--[no-]verbose", "Be somewhat verbose") do |o|
    options[:verbose] = o
  end
  
  opts.on_tail("--help",
    "Output (this) help and exit"
  ) do
    puts opts
    exit
  end
  
  opts.on_tail("--version",
    "Output version and exit"
  ) do
    puts opts.ver
    exit
  end
end.parse!

[
  :listener,
].each do |o|
  unless options[o]
    raise OptionParser::MissingArgument, "--#{o}"
  end
end


# = Create app

@app = Ryespy::App.new(options[:eternal],
  :logger => Logger.new($stdout)
)


# = Configure

@app.configure do |c|
  c.log_level = :DEBUG if options[:verbose]
  
  c.listener = options[:listener]
  
  [
    :polling_interval,
    :redis_url,
    :redis_ns_ryespy,
    :redis_ns_notifiers,
    :notifiers,
  ].each { |k| c[k] = options[k] unless options[k].nil? }
  
  {
    :imap => [
      :host,
      :port,
      :ssl,
      :username,
      :password,
      :mailboxes,
    ],
    :ftp => [
      :host,
      :passive,
      :username,
      :password,
      :dirs,
    ],
    :rax_cf => [
      :endpoint,
      :region,
      :username,
      :api_key,
      :container,
      :prefixes,
    ],
  }[c.listener].each do |k|
    lk = "#{c.listener}_#{k}".to_sym
    
    c[c.listener][k] = options[lk] unless options[lk].nil?
  end
end


# = Run app

trap('INT') { @app.stop }

begin
  @app.start
rescue => e
  warn "#{$0}: #{e}"
  
  if options[:verbose]
    raise # reraise for stacktrace
  else
    exit 1 # same non-zero status as when --debug
  end
end
